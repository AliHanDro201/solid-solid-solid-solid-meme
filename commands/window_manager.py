import os
import cv2
import json
import time
import pyautogui
import pytesseract
import numpy as np
import pywinctl as gw
from typing import Optional, Tuple, Dict

# –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
CACHE_DIR = "interface_cache"
os.makedirs(CACHE_DIR, exist_ok=True)

def sanitize_filename(filename: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    """
    return "".join(c if c.isalnum() or c in (" ", "_", "-") else "_" for c in filename)

def get_active_window_screenshot() -> Optional[str]:
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.
    """
    try:
        active_window = gw.getActiveWindow()
        if not active_window:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ.")
            return None

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        window_title = sanitize_filename(active_window.title)
        
        screenshot_path = os.path.join(CACHE_DIR, f"{window_title}_{int(time.time())}.png")

        print(f"üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞: {window_title}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        if active_window.width == 0 or active_window.height == 0:
            print("‚ùå –û—à–∏–±–∫–∞: –û–∫–Ω–æ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã!")
            return None

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        img = pyautogui.screenshot(region=(
            active_window.left,
            active_window.top,
            active_window.width,
            active_window.height
        ))

        img.save(screenshot_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(screenshot_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {screenshot_path} –Ω–µ —Å–æ–∑–¥–∞–Ω!")
            return None

        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
        return screenshot_path

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None

from PIL import Image

def extract_text_elements(image_path: str) -> Dict[str, Tuple[int, int]]:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(image_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.getsize(image_path) == 0:
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {image_path} –ø—É—Å—Ç!")
            return {}

        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å cv2)
        img = Image.open(image_path).convert("RGB")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        img_cv = np.array(img)
        img_cv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2BGR)

        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pytesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        data = pytesseract.image_to_data(gray, output_type=pytesseract.Output.DICT)

        elements = {}
        for i in range(len(data['text'])):
            text = data['text'][i].strip()
            if text:
                x, y, w, h = data['left'][i], data['top'][i], data['width'][i], data['height'][i]
                elements[text] = (x + w//2, y + h//2)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        return elements

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return {}

def save_interface_cache(window_title: str, elements: Dict[str, Tuple[int, int]]):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ JSON-—Ñ–∞–π–ª –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    cache_path = os.path.join(CACHE_DIR, f"{window_title}.json")
    with open(cache_path, "w", encoding="utf-8") as f:
        json.dump(elements, f, ensure_ascii=False, indent=4)

def load_interface_cache(window_title: str) -> Optional[Dict[str, Tuple[int, int]]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    """
    cache_path = os.path.join(CACHE_DIR, f"{window_title}.json")
    if os.path.exists(cache_path):
        with open(cache_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None





import string
import re

def normalize_text(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–∞–≤—ã—á–∫–∏, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
    """
    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–≤—ã—á–µ–∫
    for ch in ["‚Äò", "‚Äô", "‚Äú", "‚Äù", "'", "\"", "¬´", "¬ª"]:
        text = text.replace(ch, "")

    # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏ –≤—Å—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ:
    # text = text.translate(str.maketrans('', '', string.punctuation))

    # –î–ª—è —Ç–æ—á–µ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—Ç :, . –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–∫—É:
    text = text.strip(string.punctuation + " ")

    return text.lower()










def click_button(button_text: str) -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º,
    –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–µ–ª–∞—è –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞).
    """
    from PIL import Image

    active_window = gw.getActiveWindow()
    if not active_window:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ."

    # 1. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    screenshot_path = get_active_window_screenshot()
    if not screenshot_path:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞."

    # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    img = Image.open(screenshot_path)
    img_cv = np.array(img)
    img_cv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2BGR)

    # 3. –° –ø–æ–º–æ—â—å—é pytesseract —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —Å–ª–æ–≤–∞
    data = pytesseract.image_to_data(img_cv, lang="rus+eng", output_type=pytesseract.Output.DICT)
    elements = {}
    n_boxes = len(data['level'])
    for i in range(n_boxes):
        raw_word = data['text'][i].strip()
        if raw_word:
            x, y, w, h = data['left'][i], data['top'][i], data['width'][i], data['height'][i]
            cx, cy = x + w // 2, y + h // 2
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é normalize_text, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–∞–≤—ã—á–∫–∏ –∏ —Ç.–¥.
            norm_word = normalize_text(raw_word)
            if norm_word:
                elements[norm_word] = (cx, cy)

    print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) —Å–ª–æ–≤–∞:", elements.keys())

    # 4. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ
    search_key = normalize_text(button_text)
    if search_key in elements:
        x, y = elements[search_key]
        pyautogui.click(x, y)
        return f"‚úÖ –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{button_text}'."

    return f"‚ùå –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –≤–∏–¥–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."

